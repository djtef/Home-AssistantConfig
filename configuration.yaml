
# Loads default set of integrations. Do not remove.
default_config:

homeassistant:
  external_url: !secret external_url
  internal_url: !secret internal_url
  allowlist_external_dirs:
    - "/config/camera"
  customize: !include customize.yaml


logger:
  default: error
  logs:
    rflink: debug
    homeassistant.components.rflink: debug
    

ffmpeg:

camera:
  - platform: ffmpeg
    name: reolink_entree
    input: !secret rtsp_entree

  - platform: ffmpeg
    name: reolink_jardin
    input: !secret rtsp_jardin

  - platform: ffmpeg
    name: reolink_garage
    input: !secret rtsp_garage

  - platform: ffmpeg
    name: reolink_salon
    input: !secret rtsp_salon


http:
  use_x_forwarded_for: true
  trusted_proxies:
    - !secret ip_reverse_proxy #Adresse IP du reverse proxy
  ip_ban_enabled: true
  login_attempts_threshold: 3

# Text to speech
tts:
  - platform: google_translate
    language: "fr" 

# Example configuration.yaml entry
rflink:
  port: /dev/serial/by-id/usb-1a86_USB2.0-Serial-if00-port0

light:
  - platform: rflink
    automatic_add: true
    
sensor:
  - platform: rflink
    automatic_add: true

  - platform: rest
    resource_template: >-
      {{
        'https://www.doctolib.fr/availabilities.json?'
        ~ 'start_date=' ~ now().strftime("%Y-%m-%d")
        ~ '&visit_motive_ids=4183667'
        ~ '&agenda_ids=643149-643154-643166-643167-643168-643170-643175-643184-643189-643196-643200-643201-675554'
        ~ '&practice_ids=244516'
        ~ '&insurance_sector=public'
        ~ '&destroy_temporary=true'
        ~ '&limit=7'
      }}
    method: GET
    name: IRM Genou St Cyprien
    value_template: "{{ value_json.total }}"
    scan_interval: 60
    timeout: 10
    headers:
      User-Agent: "Mozilla/5.0 Gecko/20100101 Firefox/88.0"
    unit_of_measurement: appointments
    json_attributes:
      - next_slot
      - availabilities
      - reason
      - message
    
cover:
  - platform: rflink
    devices:
      brelmotor_8c48cd_05:
        name: Store banne
#        fire_event: true
  
device_tracker:    
  - platform: bluetooth_le_tracker
    consider_home: 300
    interval_seconds: 60
    new_device_defaults:
      track_new_devices: true


# Example configuration.yaml entry for the notifier
notify:
  - platform: telegram
    name: moi
    chat_id: !secret telegram_moi_chat_id
  - platform: telegram
    name: maison
    chat_id: !secret telegram_maison_chat_id

utility_meter:
  util_water_usage_hourly:
    source: sensor.compteur_eau
    cycle: hourly
  util_water_usage_daily:
    source: sensor.compteur_eau
    cycle: daily
  util_water_usage_monthly:
    source: sensor.compteur_eau
    cycle: monthly
  util_water_usage_yearly:
    source: sensor.compteur_eau
    cycle: yearly
         
# secrets inside templates not allowed
# must use hard coded 'code' on home assistant panel
# esphome code does not need to match HA code
alarm_control_panel:
  - platform: template
    panels:
      alarme_maison:
        value_template: "{{ states('sensor.state_alarm_panel') }}"
        arm_away:
          - if:
              - condition: template
                value_template: !secret test_code_silence
            then:
              - service: notify.moi
                data:
                  message: "Alarme en mode silence"
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.alarme_silencieuse
            else:
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.alarme_silencieuse
          - service: esphome.alarme_arm_home
            data:
              code: "{{ code }}"
        disarm:
          - service: esphome.alarme_disarm
            data:
              code: "{{ code }}"

template:                                                                                                                                                                        
  - trigger:     
      - platform: time_pattern
        hours: /1
      - platform: homeassistant
        event: start
    action:
      - service: weather.get_forecasts
        data:
          type: daily
        target:
          entity_id: weather.gagnac_sur_garonne
        response_variable: daily
    sensor:
      - name: Weather Forecast Jour Gagnac
        unique_id: weather_forecast_jour_gagnac
        state: "{{ daily['weather.gagnac_sur_garonne'].forecast[0].condition }}"
        attributes:
          forecast: "{{ daily['weather.gagnac_sur_garonne'].forecast }}"
          temp_max: "{{ daily['weather.gagnac_sur_garonne'].forecast[0].temperature }}"
          temp_min: "{{ daily['weather.gagnac_sur_garonne'].forecast[0].templow }}"
          precipitation: "{{ daily['weather.gagnac_sur_garonne'].forecast[0].precipitation }}"
                                                                                                                                                                    
  - trigger:     
      - platform: numeric_state
        entity_id: sensor.prise_lave_vaisselle_puissance
        for:
          hours: 0
          minutes: 0
          seconds: 30
        above: 8  
      - platform: numeric_state
        entity_id: sensor.prise_lave_vaisselle_puissance
        for:
          hours: 0
          minutes: 0
          seconds: 30
        above: 1500
      - platform: numeric_state
        entity_id: sensor.prise_lave_vaisselle_puissance
        for:
          hours: 0
          minutes: 0
          seconds: 30
        below: 1500
      - platform: numeric_state
        entity_id: sensor.prise_lave_vaisselle_puissance
        for:
          hours: 1
          minutes: 0
          seconds: 30
        below: 1500          
      - platform: numeric_state
        entity_id: sensor.prise_lave_vaisselle_puissance
        for:
          hours: 0
          minutes: 30
          seconds: 0
        below: 1   
      - platform: homeassistant
        event: start
      - platform: event
        event_type: event_template_reloaded        
    sensor:                                                                                                                                                                      
      - name: test_template                                                                                                                                                            
        state: >-    
          {% if trigger.idx == '4' %}
          Fin
          {%- else -%}
              {% if this.state == 'Libre' or this.state == 'Fin' %}
                {% if trigger.idx == '0' %}
                Prélavage
                {%- else -%}                                                                                                                                                           
                Libre 
                {%- endif -%} 
              {%- elif this.state == 'Prélavage' -%}
                {% if trigger.idx == '1' %}
                Lavage
                {%- else -%}                                                                                                                                                           
                Prélavage 
                {%- endif -%}
              {%- elif this.state == 'Lavage' -%}
                {% if trigger.idx == '2' %}
                Rinçage
                {%- else -%}                                                                                                                                                           
                Lavage 
                {%- endif -%}
              {%- elif this.state == 'Rinçage' -%}
                {% if trigger.idx == '1' %}
                Séchage
                {%- else -%}                                                                                                                                                           
                Rinçage 
                {%- endif -%}
              {%- elif this.state == 'Séchage' -%}
                {% if trigger.idx == '3' %}
                Fin
                {%- else -%}                                                                                                                                                           
                Séchage 
                {%- endif -%}
              {%- elif this.state == 'Fin' -%}
              Fin
              {%- else -%}
              Libre
              {%- endif -%}
          {%- endif -%}


  - sensor:
      - name: Sun Angle
        unit_of_measurement: "°"
        state: "{{ '%+.1f'|format(state_attr('sun.sun', 'elevation')) }}"
    
      - name: Changement capteurs
        state: >
          {% set x = expand(integration_entities("alarme"))|selectattr('domain', 'eq', 'binary_sensor') | sort(attribute='last_changed', reverse=true) | list %}
          {{ (x[0].entity_id if now() - x[0].last_changed < timedelta(seconds=3) else '') if x | count > 0 else '' }}

      - name: vr_baie_fermeture_soleil
        unit_of_measurement: '%'
        state: >
            {% set deg2rad = pi/180 %}

            {%- macro norm(x, min, max) %}
                {{ (x - min) / (max - min) }}
            {%- endmacro %}

            {%- macro h2perc(x) %}
                {{ 100 * float(norm(x, h_min, h_max)) }}
            {%- endmacro %}

            {%- macro clipv(x, x_min, x_max) %}
                {{ max(min(x, x_max), x_min) }}
            {%- endmacro %}

            {% set win_azi = 234 %}
            {% set d = 0.5 %}
            {% set h_max = 2.15 %}
            {% set h_min = 0 %}

            {% set fov = deg2rad * 90 %}

            {% set sun_azi = state_attr('sun.sun', 'azimuth') %}
            {% set sun_ele = state_attr('sun.sun', 'elevation') %}

            {% set def_h = h_max %}
            
            {% set alpha = deg2rad * sun_ele %}
            {% set gamma = deg2rad * (win_azi - sun_azi) %}    

            {% set h = (d / cos(gamma)) * tan(alpha) %}

            {% if (alpha > 0) and (gamma | abs < fov) %}
                {{ clipv(h2perc(h) | round(0) | int , 0, 100) }}
            {% else %}  
                {{ clipv(h2perc(def_h) | round(0) | int , 0, 100) }}
            {% endif %}
            
      - name: vr_fenetre_arriere_fermeture_soleil
        unit_of_measurement: '%'
        state: >
            {% set deg2rad = pi/180 %}

            {%- macro norm(x, min, max) %}
                {{ (x - min) / (max - min) }}
            {%- endmacro %}

            {%- macro h2perc(x) %}
                {{ 100 * float(norm(x, h_min, h_max)) }}
            {%- endmacro %}

            {%- macro clipv(x, x_min, x_max) %}
                {{ max(min(x, x_max), x_min) }}
            {%- endmacro %}

            {% set win_azi = 54 %}
            {% set d = 0.5 %}
            {% set h_max = 2.15 %}
            {% set h_min = 0 %}

            {% set fov = deg2rad * 90 %}

            {% set sun_azi = state_attr('sun.sun', 'azimuth') %}
            {% set sun_ele = state_attr('sun.sun', 'elevation') %}

            {% set def_h = h_max %}
            
            {% set alpha = deg2rad * sun_ele %}
            {% set gamma = deg2rad * (win_azi - sun_azi) %}    

            {% set h = (d / cos(gamma)) * tan(alpha) %}

            {% if (alpha > 0) and (gamma | abs < fov) %}
                {{ clipv(h2perc(h) | round(0) | int , 0, 100) }}
            {% else %}  
                {{ clipv(h2perc(def_h) | round(0) | int , 0, 100) }}
            {% endif %}
        

      - name: vr_cote_JM_fermeture_soleil
        unit_of_measurement: '%'
        state: >
            {% set deg2rad = pi/180 %}

            {%- macro norm(x, min, max) %}
                {{ (x - min) / (max - min) }}
            {%- endmacro %}

            {%- macro h2perc(x) %}
                {{ 100 * float(norm(x, h_min, h_max)) }}
            {%- endmacro %}

            {%- macro clipv(x, x_min, x_max) %}
                {{ max(min(x, x_max), x_min) }}
            {%- endmacro %}

            {% set win_azi = 144 %}
            {% set d = 0.5 %}
            {% set h_max = 2.15 %}
            {% set h_min = 0 %}

            {% set fov = deg2rad * 90 %}

            {% set sun_azi = state_attr('sun.sun', 'azimuth') %}
            {% set sun_ele = state_attr('sun.sun', 'elevation') %}

            {% set def_h = h_max %}
            
            {% set alpha = deg2rad * sun_ele %}
            {% set gamma = deg2rad * (win_azi - sun_azi) %}    

            {% set h = (d / cos(gamma)) * tan(alpha) %}

            {% if (alpha > 0) and (gamma | abs < fov) %}
                {{ clipv(h2perc(h) | round(0) | int , 0, 100) }}
            {% else %}  
                {{ clipv(h2perc(def_h) | round(0) | int , 0, 100) }}
            {% endif %}
       
        
binary_sensor:
  - platform: group
    name: "Capteurs ouvertures"
    device_class: opening
    entities:
      - binary_sensor.porte_entree_fermee
      - binary_sensor.porte_entree_verrouillee
      - binary_sensor.baie_cuisine_fermee_droite
      - binary_sensor.baie_cuisine_verrouillee_droite
      - binary_sensor.baie_cuisine_fermee_gauche
      - binary_sensor.baie_cuisine_verrouillee_gauche
      - binary_sensor.baie_salon_fermee_droite
      - binary_sensor.baie_salon_fermee_gauche
      - binary_sensor.baie_salon_verrouillee_droite
      - binary_sensor.baie_salon_verrouillee_gauche
      - binary_sensor.fenetre_chambre_1_fermee_droite
      - binary_sensor.fenetre_chambre_1_verrouillee_droite
      - binary_sensor.fenetre_chambre_1_fermee_gauche
      - binary_sensor.fenetre_chambre_1_verrouillee_gauche
      - binary_sensor.fenetre_sdj_fermee_droite
      - binary_sensor.fenetre_sdj_verrouillee_droite
      - binary_sensor.fenetre_sdj_fermee_gauche
      - binary_sensor.fenetre_bureau_fermee_droite
      - binary_sensor.fenetre_bureau_verrouillee_droite
      - binary_sensor.fenetre_bureau_fermee_gauche
      - binary_sensor.fenetre_bureau_verrouillee_gauche
      - binary_sensor.fenetre_cellier_fermee
      - binary_sensor.fenetre_cellier_verrouillee
      - binary_sensor.porte_fenetre_salon_fermee
      - binary_sensor.porte_fenetre_salon_verrouillee
      - binary_sensor.fenetre_sdb_rdc_fermee
      - binary_sensor.fenetre_sdb_rdc_verrouillee
      - binary_sensor.fenetre_wc_rdc_fermee
      - binary_sensor.fenetre_wc_rdc_verrouillee
      - binary_sensor.fenetre_chambre_2_fermee_droite
      - binary_sensor.fenetre_chambre_2_verrouillee_droite
      - binary_sensor.fenetre_chambre_2_fermee_gauche
      - binary_sensor.fenetre_chambre_2_verrouillee_gauche
      - binary_sensor.fenetre_chambre_3_fermee_droite
      - binary_sensor.fenetre_chambre_3_fermee_gauche
      - binary_sensor.fenetre_chambre_3_verrouillee_droite
      - binary_sensor.fenetre_chambre_3_verrouillee_gauche
      - binary_sensor.fenetre_sdb_etage_fermee
      - binary_sensor.fenetre_sdb_etage_verrouillee
      - binary_sensor.fenetre_wc_etage_fermee
      - binary_sensor.fenetre_wc_etage_verrouillee
      - binary_sensor.fenetre_palier_fermee_droite
      - binary_sensor.fenetre_palier_verrouillee_droite
      - binary_sensor.fenetre_palier_fermee_gauche
      - binary_sensor.fenetre_palier_verrouillee_gauche
      - binary_sensor.fenetre_escalier_fermee
      - binary_sensor.fenetre_escalier_verrouillee
      - binary_sensor.porte_garage_fermee_gauche
      - binary_sensor.porte_garage_verrouillee_gauche
      - binary_sensor.porte_garage_verrouillee_droite
      - binary_sensor.fenetre_garage_fermee

# Roborock
# 16	8948821	Salon
# 18	8987278	Placard
# 19	8948824	Cuisine
# 20	8948826	Salle à manger
# 21	8948913	WC RDC
# 22	8948867	Cellier
# 23	8987276	Couloir
# 24	8987258	Salle de jeux
# 25	8948891	Chambre parents
# 26	8948843	Salle de bain RDC
# 27	8948828	Bureau


climate:
  - platform: climate_template
    name: Séjour
    unique_id: sejour_k1a_climate_template
    icon_template: mdi:home-thermometer
    availability_template: >- 
        {{ is_state('sensor.aiguillage_vanne', 'Air') 
        or  is_state('sensor.aiguillage_vanne', 'Standby')
        or  is_state('sensor.aiguillage_vanne', 'ECS') }}
    modes:
      - "heat"
      - "cool"  # Si la climatisation est activée
      - "off"
    preset_modes:
      - comfort
      - eco
      - away
      - home
      - boost
      - none
    hvac_mode_template: >-
      {% if 'Chauffage' in states('select.mode_air') %} 
          heat
      {% elif 'Clim' in states('select.mode_air') %} 
          cool
      {% else %} 
          off      
      {% endif %}
    preset_mode_template: >-
      {% if is_state('select.mode_air', 'Off') %}
        none
      {% elif 'Confort' in states('select.mode_air') %}
        comfort
      {% elif 'Prog A' in states('select.mode_air') or 'Prog C' in states('select.mode_air') %}
        away
      {% elif 'Prog B' in states('select.mode_air') or 'Prog D' in states('select.mode_air') %}
        home
      {% elif 'Eco' in states('select.mode_air') %}
        eco
      {% elif 'Boost' in states('select.mode_air') %}
        boost
      {% else %}
        none
      {% endif %}
    set_preset_mode:
      - action: select.select_option
        data:
          entity_id: select.mode_air
          option: >-
            {% if 'Chauffage' in states('select.mode_air') %} 
                {% if preset_mode == 'none' %}
                    Off
                {% elif preset_mode == 'comfort' or preset_mode == 'boost' %}
                    Confort Chauffage
                {% elif preset_mode == 'away' %}
                   Prog A Chauffage
                {% elif preset_mode == 'home' %}
                   Prog B Chauffage
                {% elif preset_mode == 'eco' %}
                   Eco Chauffage
                {% endif %}
            {% elif 'Clim' in states('select.mode_air') %} 
              {% if preset_mode == 'none' %}
                    Off
                {% elif preset_mode == 'comfort' or preset_mode == 'eco' %}
                    Confort Clim
                {% elif preset_mode == 'away' %}
                   Prog C Clim
                {% elif preset_mode == 'home' %}
                   Prog D Clim
                {% elif preset_mode == 'boost' %}
                   Boost Clim
                {% endif %}
            {% else %}
              Off
            {% endif %}
    set_hvac_mode:
      - action: select.select_option
        data:
          entity_id: select.mode_air
          option: >-
            {% if hvac_mode == 'heat' %}
              Confort Chauffage
            {% elif hvac_mode == 'cool' %}
              Confort Clim
            {% elif hvac_mode == 'off' %}
              Off
            {% else %}
              Off
            {% endif %}
    hvac_action_template: >-
      {% if is_state('binary_sensor.bouche_k1a', 'off') %}
        off
      {% elif 'Chauffage' in states('select.mode_air') %}
        heating
      {% elif 'Clim' in states('select.mode_air') %}
        cooling
      {% else %}
        idle
      {% endif %}

    #current_humidity_template: "{{ states('sensor.aqara_temperature_et_humidite_thermostat_k1a_humidity') }}" # Avec capteur additionnel
    temp_step: 1
    current_temperature_template: "{{ states('sensor.temperature_piece_principale') }}"     
    min_temp: 0
    max_temp_template: >-
      {% if 'Chauffage' in states('select.mode_air') %} 
          24
      {% elif 'Clim' in states('select.mode_air') %} 
           31
      {% else %} 
          24        {##  pas vraiment besoin  ##} 
      {% endif %}
    target_temperature_template: "{{ states('number.thermostat_1') }}" 
    set_temperature:
      - action: number.set_value
        data:
          entity_id: number.thermostat_1  
          value: "{{ temperature }}"
 
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
